jar {
    baseName = BASE_NAME
    version =  VERSION
    from ('./src/main/java') {
        include 'META-INF/services/javax.ws.rs.ext.Providers'
    }
    excludes = ["properties"]
    manifest {
        attributes(
                "Class-Path": '. ' + configurations.compile.collect { 'libs/' + it.getName() }.join(' '),
                "Main-Class": MAIN_CLASS
        )
    }
}

task cleanBuild(type: Delete) {
    delete 'dist'
    delete 'release'
}

task copyJar(type: Copy) {
    from 'build/libs'
    into 'dist'
}

task copyDevResources(type: Copy) {
    from 'src/main/resources'
    into 'dist'
}

task copyTestResources(type: Copy) {
    from 'build_config/test'
    into 'dist'
}

task copyProdResources(type: Copy) {
    from 'build_config/prod'
    into 'dist'
}

task copyLibs(type: Copy) {
    from 'libs'
    from configurations.runtime
    into 'dist/lib'
}

task tarDist(type: Zip) {
    from 'dist'
}

task copyRelease(type: Copy) {
    from 'build/distributions'
    into 'release'
}

task releaseCommon << {
    tasks.jar.execute()
    tasks.cleanBuild.execute()
    tasks.copyJar.execute()
    tasks.copyDevResources.execute()
    tasks.copyLibs.execute()
}

task releaseTest << {
    tasks.releaseCommon.execute()
    tasks.copyTestResources.execute()
    tasks.tarDist.execute()
    tasks.copyRelease.execute()
}

task releaseProd << {
    tasks.releaseCommon.execute()
    tasks.copyProdResources.execute()
    tasks.tarDist.execute()
    tasks.copyRelease.execute()
}


def getDbProperties = {
    def properties = new Properties()
    file("src/main/resources/myBatisGenerator/config.properties").withInputStream { inputStream ->
        properties.load(inputStream)
    }
    properties
}

task mybatisGenerate << {
    def properties = getDbProperties()
    ant.properties['targetProject'] = projectDir.path
    ant.properties['driverClass'] = properties.getProperty("jdbc.driverClassName")
    ant.properties['connectionURL'] = properties.getProperty("jdbc.url")
    ant.properties['userId'] = properties.getProperty("jdbc.username")
    ant.properties['password'] = properties.getProperty("jdbc.password")
    ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
    ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
    ant.properties['modelPackage'] = properties.getProperty("package.model")
    ant.properties['mapperPackage'] = properties.getProperty("package.mapper")
    ant.properties['sqlMapperPackage'] = properties.getProperty("package.xml")
    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )
    ant.mbgenerator(overwrite: true,
            configfile: 'src/main/resources/myBatisGenerator/generatorConfig.xml', verbose: true) {
        propertyset {
            propertyref(name: 'targetProject')
            propertyref(name: 'userId')
            propertyref(name: 'driverClass')
            propertyref(name: 'connectionURL')
            propertyref(name: 'password')
            propertyref(name: 'src_main_java')
            propertyref(name: 'src_main_resources')
            propertyref(name: 'modelPackage')
            propertyref(name: 'mapperPackage')
            propertyref(name: 'sqlMapperPackage')
        }
    }
}
